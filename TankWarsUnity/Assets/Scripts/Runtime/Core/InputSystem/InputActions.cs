//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Scripts/Runtime/Core/InputSystem/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""VehicleControl"",
            ""id"": ""8295b364-62b1-4494-881f-ae69e36d399c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3c979822-71ad-4036-aab1-cbe0b4258218"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""fd5cb409-95f1-4bce-b624-4a4c74f49a23"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""5b4b4f99-7707-482f-bde2-5e4a852ec87b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""bb842790-f543-494c-93b9-acc75fe01442"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""034f0692-27f4-49cc-9652-0a45c3a38c71"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""01ebfa17-8983-4592-9e90-eb1bbd0c8aae"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""935f585c-0d8a-4df4-887f-1a8bb6459d52"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9497bc1b-dd2a-45d3-8689-bd55e8e526a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4c2aef0-4471-424d-8d0d-ca38e9515899"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""15e11f83-848a-42ba-87ae-f18d187b2596"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d9cedaeb-4c74-4095-a99c-d29ec076525c"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c7ced5f2-f392-4e16-9f4d-f9e1f9457be0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1273fbfb-f9e0-4c73-87e7-fd710fdea5d7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""84c0f762-9ded-411e-a614-80b8df5c544f"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf834575-1b96-4461-b3c2-5708c22d03fe"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""27194c07-406d-4f74-aa5d-4c1be9904b7e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a2418096-43d7-43ab-933d-7f12881ac9d9"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb44484a-84f2-4d46-a684-ef9262dd9a1b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50cf9a2a-0e65-488e-89b8-ad9040413622"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92e23ff3-8e5c-47c8-b1bb-399c5e718053"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenuControl"",
            ""id"": ""5f222861-9b41-4b4f-b6da-3f19a6716164"",
            ""actions"": [
                {
                    ""name"": ""UpAction"",
                    ""type"": ""Button"",
                    ""id"": ""0324284a-d049-4d12-8365-e80d9e8ee366"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3100b537-db5f-48df-bc15-01577962b912"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VehicleControl
        m_VehicleControl = asset.FindActionMap("VehicleControl", throwIfNotFound: true);
        m_VehicleControl_Movement = m_VehicleControl.FindAction("Movement", throwIfNotFound: true);
        m_VehicleControl_Aiming = m_VehicleControl.FindAction("Aiming", throwIfNotFound: true);
        m_VehicleControl_Fire = m_VehicleControl.FindAction("Fire", throwIfNotFound: true);
        m_VehicleControl_Pause = m_VehicleControl.FindAction("Pause", throwIfNotFound: true);
        // PauseMenuControl
        m_PauseMenuControl = asset.FindActionMap("PauseMenuControl", throwIfNotFound: true);
        m_PauseMenuControl_UpAction = m_PauseMenuControl.FindAction("UpAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VehicleControl
    private readonly InputActionMap m_VehicleControl;
    private List<IVehicleControlActions> m_VehicleControlActionsCallbackInterfaces = new List<IVehicleControlActions>();
    private readonly InputAction m_VehicleControl_Movement;
    private readonly InputAction m_VehicleControl_Aiming;
    private readonly InputAction m_VehicleControl_Fire;
    private readonly InputAction m_VehicleControl_Pause;
    public struct VehicleControlActions
    {
        private @InputActions m_Wrapper;
        public VehicleControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_VehicleControl_Movement;
        public InputAction @Aiming => m_Wrapper.m_VehicleControl_Aiming;
        public InputAction @Fire => m_Wrapper.m_VehicleControl_Fire;
        public InputAction @Pause => m_Wrapper.m_VehicleControl_Pause;
        public InputActionMap Get() { return m_Wrapper.m_VehicleControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VehicleControlActions set) { return set.Get(); }
        public void AddCallbacks(IVehicleControlActions instance)
        {
            if (instance == null || m_Wrapper.m_VehicleControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VehicleControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IVehicleControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IVehicleControlActions instance)
        {
            if (m_Wrapper.m_VehicleControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVehicleControlActions instance)
        {
            foreach (var item in m_Wrapper.m_VehicleControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VehicleControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VehicleControlActions @VehicleControl => new VehicleControlActions(this);

    // PauseMenuControl
    private readonly InputActionMap m_PauseMenuControl;
    private List<IPauseMenuControlActions> m_PauseMenuControlActionsCallbackInterfaces = new List<IPauseMenuControlActions>();
    private readonly InputAction m_PauseMenuControl_UpAction;
    public struct PauseMenuControlActions
    {
        private @InputActions m_Wrapper;
        public PauseMenuControlActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpAction => m_Wrapper.m_PauseMenuControl_UpAction;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenuControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuControlActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuControlActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuControlActionsCallbackInterfaces.Add(instance);
            @UpAction.started += instance.OnUpAction;
            @UpAction.performed += instance.OnUpAction;
            @UpAction.canceled += instance.OnUpAction;
        }

        private void UnregisterCallbacks(IPauseMenuControlActions instance)
        {
            @UpAction.started -= instance.OnUpAction;
            @UpAction.performed -= instance.OnUpAction;
            @UpAction.canceled -= instance.OnUpAction;
        }

        public void RemoveCallbacks(IPauseMenuControlActions instance)
        {
            if (m_Wrapper.m_PauseMenuControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuControlActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuControlActions @PauseMenuControl => new PauseMenuControlActions(this);
    public interface IVehicleControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPauseMenuControlActions
    {
        void OnUpAction(InputAction.CallbackContext context);
    }
}
